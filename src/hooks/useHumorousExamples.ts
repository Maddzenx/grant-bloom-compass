import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

// Fallback examples in case API call fails
const FALLBACK_EXAMPLES = [
  'Vi Ã¤r ett konsortium av pirater som vill expandera vÃ¥r verksamhet till att sÃ¤lja krabbor pÃ¥ lokala loppmarknader',
  'Vi Ã¤r en forskningsgrupp som studerar varfÃ¶r katter alltid landar pÃ¥ sina fÃ¶tter och vill utveckla detta till fallskÃ¤rmsteknologi',
  'Vi Ã¤r ett startup som utvecklar AI-assistenter fÃ¶r att hjÃ¤lpa plantor att nÃ¤tverka med varandra',
  'Vi Ã¤r ett team av ex-cirkusartister som vill revolutionera byggbranschen med akrobatisk taklÃ¤ggning',
  'Vi Ã¤r en grupp pensionerade vikingar som vill starta ett miljÃ¶vÃ¤nligt skÃ¤ggolje-imperium',
  'Vi Ã¤r ett kollektiv av professionella gÃ¤spare som forskar om smittsamma gÃ¤spningar fÃ¶r stressreduktion',
  'Vi Ã¤r ett fÃ¶retag av tidigare operasÃ¥ngare som utvecklar ljudisolering med hjÃ¤lp av klassisk musik',
  'Vi Ã¤r en kooperativ av forna trollkarlar som forskar om hur man fÃ¥r sockor att aldrig fÃ¶rsvinna i tvÃ¤ttmaskinen',
  'Vi Ã¤r ett startup som trÃ¤nar myror att leverera minipaket inom stadskÃ¤rnan fÃ¶r miljÃ¶vÃ¤nlig transport',
  'Vi Ã¤r en forskningsgrupp som utvecklar Ã¶versÃ¤ttningsappar fÃ¶r att fÃ¶rstÃ¥ vad hundar egentligen menar',
  'Vi Ã¤r ett kollektiv av pensionerade astronauter som odlar grÃ¶nsaker i tyngdlÃ¶shetssimulering',
  'Vi Ã¤r en grupp fÃ¶re detta mimar som revolutionerar ljudlÃ¶s kommunikationsteknologi fÃ¶r bibliotek',
  'Vi Ã¤r ett fÃ¶retag av ex-detektiver som utvecklar AI fÃ¶r att hitta fÃ¶rsvunna nycklar och fjÃ¤rrkontroller',
  'Vi Ã¤r en kooperativ av tidigare schackspelare som designar mÃ¶bler som bara kan monteras med strategiskt tÃ¤nkande',
  'Vi Ã¤r ett startup som trÃ¤nar katter att sortera Ã¥tervinning fÃ¶r att minska miljÃ¶pÃ¥verkan',
  'Vi Ã¤r en forskningsgrupp som studerar varfÃ¶r toast alltid landar pÃ¥ smÃ¶rsidan och vill anvÃ¤nda detta fÃ¶r energiproduktion',
  'Vi Ã¤r ett kollektiv av fÃ¶re detta skrÃ¤ddare som utvecklar sjÃ¤lvlÃ¤kande klÃ¤der med nanoteknik',
  'Vi Ã¤r en grupp pensionerade brandmÃ¤n som forskar om hur man kan slÃ¤cka eld med musik istÃ¤llet fÃ¶r vatten',
  'Vi Ã¤r ett fÃ¶retag av tidigare djurtrÃ¤nare som utvecklar appar fÃ¶r att kommunicera med husdjur via emojis',
  'Vi Ã¤r en kooperativ av ex-bagare som forskar om hur man kan baka brÃ¶d som aldrig blir gammalt',
  'Vi Ã¤r ett startup som trÃ¤nar fiskar att rena vattenreservoarer genom avancerad simteknik',
  'Vi Ã¤r en forskningsgrupp som utvecklar robotar som kan klappa kuddar perfekt fÃ¶r hotellbranschen',
  'Vi Ã¤r ett kollektiv av tidigare meteorologer som fÃ¶rutspÃ¥r humÃ¶r baserat pÃ¥ lufttryck och temperatur',
  'Vi Ã¤r en grupp pensionerade clowner som revolutionerar terapimetoder genom strategisk humor',
  'Vi Ã¤r ett fÃ¶retag av ex-bibliotekarie som utvecklar AI som kan tysta folk pÃ¥ avstÃ¥nd utan att sÃ¤ga "schh"',
  'Vi Ã¤r en kooperativ av tidigare fotografer som forskar om hur man tar selfies utan att se narcissistisk ut',
  'Vi Ã¤r ett startup som trÃ¤nar bin att producera honung med olika smaker baserat pÃ¥ kundens Ã¶nskemÃ¥l'
];

export const useHumorousExamples = () => {
  const [example, setExample] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const getRandomFallbackExample = () => {
    const randomIndex = Math.floor(Math.random() * FALLBACK_EXAMPLES.length);
    return FALLBACK_EXAMPLES[randomIndex];
  };

  const generateExample = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      console.log('ðŸŽ­ Generating humorous example...');
      
      const { data, error } = await supabase.functions.invoke('generate-humorous-example', {
        body: {}
      });

      if (error) {
        console.error('Error generating humorous example:', error);
        setError(error.message);
        // Use fallback example
        const fallbackExample = getRandomFallbackExample();
        setExample(fallbackExample);
        console.log('ðŸŽ­ Using fallback example:', fallbackExample);
        return;
      }

      if (data && data.example) {
        console.log('âœ… Generated humorous example:', data.example);
        setExample(data.example);
      } else {
        // No example returned, use fallback
        const fallbackExample = getRandomFallbackExample();
        setExample(fallbackExample);
        console.log('ðŸŽ­ No example returned, using fallback:', fallbackExample);
      }
    } catch (err) {
      console.error('Error generating humorous example:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
      // Use fallback example
      const fallbackExample = getRandomFallbackExample();
      setExample(fallbackExample);
      console.log('ðŸŽ­ Using fallback example due to error:', fallbackExample);
    } finally {
      setIsLoading(false);
    }
  };

  // Generate example on mount
  useEffect(() => {
    generateExample();
  }, []);

  return {
    example,
    isLoading,
    error,
    generateExample
  };
}; 