
import { useState, useCallback, useEffect } from 'react';
import { Grant } from '@/types/grant';
import { Message } from '@/components/chat/ChatMessage';
import { useToast } from '@/hooks/use-toast';

export interface ApplicationDraft {
  sections: Record<string, string>;
  wordCount: number;
  completionStatus: number;
}

interface ConversationState {
  currentStep: number;
  collectedInfo: Record<string, any>;
  questions: string[];
}

export const useChatAgent = (grant: Grant | undefined) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [applicationDraft, setApplicationDraft] = useState<ApplicationDraft | null>(null);
  const [isDraftReady, setIsDraftReady] = useState(false);
  const [conversationState, setConversationState] = useState<ConversationState>({
    currentStep: 0,
    collectedInfo: {},
    questions: []
  });
  const { toast } = useToast();

  // Initialize conversation with welcome message
  useEffect(() => {
    if (grant && messages.length === 0) {
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        type: 'assistant',
        content: `Hej! Jag 칛r din AI-assistent som hj칛lper dig att skriva en ans칬kan f칬r "${grant.title}" fr친n ${grant.organization}.\n\nJag kommer att st칛lla n친gra fr친gor f칬r att samla in den information som beh칬vs f칬r din ans칬kan. Vi b칬rjar med grundl칛ggande information om ditt projekt.\n\nKan du ber칛tta kort om ditt projekt och vad du vill uppn친?`,
        timestamp: new Date()
      };
      
      setMessages([welcomeMessage]);
      
      // Set up the conversation flow
      setConversationState({
        currentStep: 0,
        collectedInfo: { grant: grant },
        questions: [
          "Kan du ber칛tta kort om ditt projekt och vad du vill uppn친?",
          "Vilken utmaning eller problem l칬ser ditt projekt?",
          "Vad 칛r m친let med projektet och vilka resultat f칬rv칛ntar du dig?",
          "Vilken 칛r din m친lgrupp och hur kommer de att gynnas?",
          "Vilka resurser och kompetenser har ni f칬r att genomf칬ra projektet?",
          "Hur passar ert projekt in i bidragets syfte och kriterier?",
          "Vilken 칛r er budget och hur planerar ni att anv칛nda medlen?"
        ]
      });
    }
  }, [grant, messages.length]);

  const sendMessage = useCallback(async (content: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);

    // Store user input
    const updatedInfo = {
      ...conversationState.collectedInfo,
      [`step_${conversationState.currentStep}`]: content
    };

    // Simulate AI thinking time
    setTimeout(async () => {
      const nextStep = conversationState.currentStep + 1;
      let assistantResponse = '';

      if (nextStep < conversationState.questions.length) {
        // Continue with next question
        assistantResponse = `Tack f칬r den informationen! ${conversationState.questions[nextStep]}`;
        
        setConversationState(prev => ({
          ...prev,
          currentStep: nextStep,
          collectedInfo: updatedInfo
        }));
      } else {
        // All questions answered, generate draft
        assistantResponse = "Fantastiskt! Jag har nu all information jag beh칬ver. L친t mig skapa ett utkast av din ans칬kan baserat p친 v친rt samtal. Detta kan ta en stund...";
        
        // Generate application draft
        setTimeout(() => {
          generateApplicationDraft(updatedInfo);
        }, 2000);
      }

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: assistantResponse,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 2000); // Random delay for realistic feel

  }, [conversationState]);

  const generateApplicationDraft = useCallback((collectedInfo: Record<string, any>) => {
    // Simulate draft generation
    setTimeout(() => {
      const draft: ApplicationDraft = {
        sections: {
          projektbeskrivning: collectedInfo.step_0 || '',
          problemformulering: collectedInfo.step_1 || '',
          mal_och_resultat: collectedInfo.step_2 || '',
          malgrupp: collectedInfo.step_3 || '',
          resurser_och_kompetens: collectedInfo.step_4 || '',
          relevans: collectedInfo.step_5 || '',
          budget: collectedInfo.step_6 || ''
        },
        wordCount: Object.values(collectedInfo).join(' ').split(' ').length,
        completionStatus: 85
      };

      setApplicationDraft(draft);
      setIsDraftReady(true);

      const draftReadyMessage: Message = {
        id: Date.now().toString(),
        type: 'assistant',
        content: "游꿀 Ditt ans칬kningsutkast 칛r klart! Du kan nu f칬rhandsgranska det i panelen till h칬ger eller exportera det som en fil. Beh칬ver du g칬ra n친gra 칛ndringar eller har du fr친gor om inneh친llet?",
        timestamp: new Date()
      };

      setMessages(prev => [...prev, draftReadyMessage]);
      setIsTyping(false);
    }, 3000);
  }, []);

  const exportDraft = useCallback(() => {
    if (!applicationDraft || !grant) return;

    const draftText = Object.entries(applicationDraft.sections)
      .map(([section, content]) => `${section.toUpperCase()}\n${content}\n\n`)
      .join('');

    const blob = new Blob([draftText], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `ans칬kan_${grant.title.replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toast({
      title: "Utkast exporterat",
      description: "Din ans칬kan har laddats ner som en textfil."
    });
  }, [applicationDraft, grant, toast]);

  return {
    messages,
    isTyping,
    applicationDraft,
    isDraftReady,
    sendMessage,
    exportDraft
  };
};
